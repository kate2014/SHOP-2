package com.shop.controller.backmember;

import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.shop.entity.XxMember;
import com.shop.service.backstage.MemberManagerService;

import cn.itcast.utils.Page;

@Controller
@RequestMapping("/memberm")
public class MemberManagerController {
	@Autowired
	private MemberManagerService mms;
	@RequestMapping("/getMember")
	public String getMember(HttpServletRequest request,Integer page,Integer size){
		if(page==null){
			page=1;
		}if(size==null){
			size=2;
		}
		Page<Map<String,Object>> pages=new Page<>();
		Map<String,Object> map = new HashMap<>();
		map.put("index", (page-1)*2);
		map.put("num",size);
		List<Map<String,Object>> list = mms.getMember(map);
		int total = mms.selectMemberCount();
		pages.setPage(page);
		pages.setRows(list);
		pages.setSize(size);
		pages.setTotal(total);
		request.setAttribute("page",pages);
		return "backstage/user/membermanage";
	}
	@RequestMapping("/saveMember")
	public String saveMember(XxMember xm,HttpServletRequest request){
		String addr = request.getRemoteAddr();
		xm.setRegisterIp(addr);
		if(xm.getBirth()==null){
			xm.setBirth(new Date());
		}
		mms.saveMember(xm);
		return "redirect:getMember";
		
	}
	@SuppressWarnings("rawtypes")
	@RequestMapping("/delMember")
	public @ResponseBody Page delMember(String str,int page){
		String[] split = str.split(",");
		int length = split.length;
		Long a[] = new Long [length];
		for(int i=0 ; i<length;i++){
			a[i] = Long.parseLong(split[i]);
		}
		mms.delByIds(a);
		int total = mms.selectMemberCount();
		Page<Map<String,Object>> pages=new Page<>();
		Map<String,Object> map = new HashMap<>();
		map.put("index", (page-1)*2);
		map.put("num",2);
		List<Map<String,Object>> list = mms.getMember(map);
		pages.setPage(page);
		pages.setRows(list);
		pages.setSize(2);
		pages.setTotal(total);
		return pages;
		
	}
	@RequestMapping("/updateMemberMessage")
	public String updateMemberMessage(HttpServletRequest request,int id){
		XxMember xm = mms.selectMemberById(id);
		DecimalFormat df2 = new DecimalFormat("###.00");
		BigDecimal mData = new BigDecimal(xm.getBalance().toString()).setScale(2, BigDecimal.ROUND_HALF_UP);
		xm.setBalance(mData);
		df2.format(xm.getPoint());
		request.setAttribute("xm", xm);
		return "backstage/user/membermanageedit";
	}
	@RequestMapping("/checkMemberMessage")
	public String checkMemberMessage(HttpServletRequest request,int id){
		String i =id+"";
		XxMember xm = mms.selectMemberById(Long.parseLong(i));
		request.setAttribute("xm",xm);
		return "backstage/user/membermanagefind";
		
	}
	@RequestMapping("/updateMember")
	public String  updateMember(@DateTimeFormat(pattern="yyyy-MM-dd")Date birth1,XxMember xm,String changeBalance,String changePoint){
//		System.out.println(xm);
//		XxMember xm,
		// @DateTimeFormat(pattern="yyyy-MM-dd")Date birth,
	
		xm.setBirth(birth1);
		mms.updateMember( xm);
		if(!changeBalance.equals("")){
			Long changebalance1 = Long.parseLong(changeBalance);
			mms.updateOneConlum(changebalance1,xm.getId());
		}
		if(!changePoint.equals("")){
			 Long changePoint1 = Long.parseLong(changePoint);
			 mms.updatePoint(changePoint1,xm.getId());
		}
		return "redirect:getMember";
		
	}
	@RequestMapping("/showMemberByCount")
	public String showMemberByCount(@RequestParam(value="rows",defaultValue="5")int size,@RequestParam(value="page",defaultValue="1")int page,Model model){
		int total = mms.selectMemberCount();
		System.out.println(size+"sdasdasdasdasdasdasdasdasdasdasd");
		Page<Map<String,Object>> pages=new Page<>();
		Map<String,Object> map = new HashMap<>();
		map.put("index", (page-1)*size);
		map.put("num",size);
		List<Map<String,Object>> list = mms.getMember(map);
		pages.setPage(page);
		pages.setRows(list);
		pages.setSize(size);
		pages.setTotal(total);
		model.addAttribute(pages);
		return "backstage/user/membermanage";
	}
}



